#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/init.h>
#include <linux/types.h>
#include <linux/delay.h>
#include <linux/moduleparam.h>
#include <linux/poll.h>
#include <linux/irq.h>
#include <linux/delay.h>
#include <asm/irq.h>
#include <asm/io.h>
#include <linux/interrupt.h>
#include <asm/uaccess.h>
#include <mach/hardware.h>
#include <linux/platform_device.h>
#include <linux/cdev.h>
#include <linux/miscdevice.h>
#include <linux/ioctl.h>
#include <mach/map.h>
#include <mach/gpio.h>
#include <mach/regs-clock.h>
#include <mach/regs-gpio.h>

#define DEVICE_NAME		"codewheel"
#define DIAMETER_OF_WHEEL		75  //unit is mm
#define NUM_OF_RASTER	24 



volatile int read_return = 0;
static unsigned long pulse_flag = 0;
static unsigned long  num_of_pluse=0;

struct codewheel_desc {
	int gpio;
	int number;
	char *name;
    int irq;	
};
static struct codewheel_desc codewheel[] = {
	{ S5PV210_GPH2(0), 0, "codewheel0" },
	//{ S5PV210_GPH2(2), 2, "codewheel1" },
	//{ S5PV210_GPH2(5), 2, "codewheel2" },
	//{ S5PV210_GPH2(6), 3, "codewheel3" },
};

static DECLARE_WAIT_QUEUE_HEAD(codewheel_waitq);

static irqreturn_t codewheel_interrupt(int irq, void *dev_id)
{
        struct codewheel_desc *bdata = (struct codewheel_desc *)dev_id;
           int number;
        
	  //tasklet_init(&codewheel_tasklet, tasklet_handler, bdata);
       
       // tasklet_schedule(&codewheel_tasklet);
                 number = bdata->number;
            printk("read_return=%d\n",read_return);
          if(read_return ==0){
        read_return = 1;
        mdelay(37);
        printk("hasobstacle bdata->irq=%d\n",bdata->irq);
        disable_irq_nosync(bdata->irq);
          }
             else read_return = 0;
	  return IRQ_HANDLED;
}


void mileage_to_numofpulse (int mileage_int,int mileage_decimal)
{    
     unsigned long tmp;
	 unsigned long circumference=0;
     circumference=DIAMETER_OF_WHEEL*314/10;  // unit is 0.1mm
	 tmp=100*(mileage_int*100+mileage_decimal);//unit is 0.1mm
	 num_of_pluse=(tmp*24/circumference);
	 printk(" num_of_pluse=%lu\n",num_of_pluse);
	 read_return = 0;
     printk("compute ok\n");
}



static int mini210_codewheel_open(struct inode *inode, struct file *file)
{
	int i;
	int err = 0;

	for (i = 0; i < ARRAY_SIZE(codewheel); i++) {
		if (!codewheel[i].gpio)//initialize gpio low
			continue;

		codewheel[i].irq = gpio_to_irq(codewheel[i].gpio);
		err = request_irq(codewheel[i].irq, codewheel_interrupt, IRQF_TRIGGER_RISING, 
				codewheel[i].name, (void *)&codewheel[i]);

                       disable_irq(codewheel[i].irq);
              printk("in  the open irq=%d\n",codewheel[i].irq);
		if (err)
			break;
	}

	if (err) {
		i--;
		for (; i >= 0; i--) {
			if (!codewheel[i].gpio)
				continue;

			codewheel[i].irq= gpio_to_irq(codewheel[i].gpio);
			disable_irq(codewheel[i].irq);
			free_irq(codewheel[i].irq, (void *)&codewheel[i]);

		}

		return -EBUSY;
	}

	read_return = 0;
	return 0;
}

static int mini210_codewheel_close(struct inode *inode, struct file *file)
{
	int  i;

	for (i = 0; i < ARRAY_SIZE(codewheel); i++) {
		if (!codewheel[i].gpio)
			continue;

		codewheel[i].irq = gpio_to_irq(codewheel[i].gpio);
		free_irq(codewheel[i].irq, (void *)&codewheel[i]);

		
	}

	return 0;
}


static int mini210_codewheel_read(struct file *filp, char __user *buff,
		size_t count, loff_t *offp)
{       
       char notice[4];
       char set[]={"ok!"};
	 unsigned long err;
	/*if (!read_return) {
		if (filp->f_flags & O_NONBLOCK)
			return -EAGAIN;
		else
			wait_event_interruptible(codewheel_waitq, read_return);
	 }
	  */if(read_return == 1){
            strcpy(notice,set);
	      read_return = 0;
             }
          else notice[0]='\0';
 
	      err = copy_to_user((void *)buff, (const void *)(&notice),
			min(sizeof(notice), count));
	return err ? -EFAULT : min(sizeof(notice), count);
}

static int mini210_codewheel_write(struct file *filp, const char __user *buff, size_t count, loff_t *offp)
{
       printk("write\n");
	int mileage[4];
	int ret;
       pulse_flag=0;
	if (count == 0) {
		return count;
	}

	ret = copy_from_user(mileage, buff, sizeof mileage) ? -EFAULT : 0;
        printk("mileage[0]=%d mileage[1]=%d\n",mileage[0],mileage[1]);
	if (ret) {
		return ret;
	}

   mileage_to_numofpulse(mileage[0],mileage[1]);
   return count;
	
	
}


#define MEMDEV_IOC_MAGIC 'k'
#define MEMDEV_DISABLE_IRQ _IOW(MEMDEV_IOC_MAGIC,0,int)
#define MEMDEV_ENABLE_IRQ _IOW(MEMDEV_IOC_MAGIC,1,int)
#define MEMDEV_WKAE_UP_READ _IOW(MEMDEV_IOC_MAGIC,2,int)


#define MEMDEV_IOC_MAXNR 2 //定义命令的最大序列号



static long mini210_codewheel_ioctl(struct file *filp, unsigned int cmd,
		unsigned long arg)
{ 
      int err = 0;
     // printk("ioctl cmd=%u arg=%lu\n",cmd,arg);


      if (_IOC_TYPE(cmd) != MEMDEV_IOC_MAGIC) 
           return -EINVAL;
      if (_IOC_NR(cmd) > MEMDEV_IOC_MAXNR) 
           return -EINVAL;

	
	switch(cmd){

	case MEMDEV_DISABLE_IRQ:
			 disable_irq(codewheel[arg].irq);
                   
                   break;
	case MEMDEV_ENABLE_IRQ:
                   read_return = 0;
                   enable_irq(codewheel[arg].irq); 
                  // printk("codewheel[%lu].irq=%d\n",arg,codewheel[arg].irq);
                    
	             break;
       case MEMDEV_WKAE_UP_READ:
                   read_return = 1;
                   printk("MEMDEV_WKAE_UP_READ\n");
                   break;
	default:
	             break;
       }
      if (err)  
           return -ENOTTY; 
	
	return 0;
}




static unsigned int mini210_codewheel_poll( struct file *file,
		struct poll_table_struct *wait)
{
	unsigned int mask = 0;
        printk("poll\n");
	poll_wait(file, &codewheel_waitq, wait);
	if (read_return)
		mask |= POLLIN | POLLRDNORM;

	return mask;
}

static struct file_operations dev_fops = {
	.owner	= THIS_MODULE,
	.open		= mini210_codewheel_open,
	.release	= mini210_codewheel_close, 
	.read		= mini210_codewheel_read,
    .write    = mini210_codewheel_write, 
	.poll		= mini210_codewheel_poll,
    .unlocked_ioctl= mini210_codewheel_ioctl,
             
};

static struct miscdevice misc = {
	.minor		= MISC_DYNAMIC_MINOR,
	.name		= DEVICE_NAME,
	.fops		= &dev_fops,
};

static int __init codewheel_dev_init(void)
{
	int ret;
       read_return = 1;
	ret = misc_register(&misc);

	printk(DEVICE_NAME"\tinitialized\n");

	return ret;
}

static void __exit codewheel_dev_exit(void)
{
	misc_deregister(&misc);
}

module_init(codewheel_dev_init);
module_exit(codewheel_dev_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("zsj");

